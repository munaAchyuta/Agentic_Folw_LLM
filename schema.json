{"app.py": {"abs_path": "E:\\tmp\\langGraphTestProject\\dummy_project\\app.py", "read_root": {"definition": "def read_root():\n    return {\"message\": \"Welcome to the FastAPI application\"}", "description": "", "params": [], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "read_item": {"definition": "def read_item(item_id: int):\n    if item_id in items_db:\n        return items_db[item_id]\n    else:\n        raise HTTPException(status_code=404, detail=\"Item not found\")", "description": "", "params": [{"type": "int", "data": "item_id"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": ["HTTPException"], "dependency_from_input": ["int"]}, "create_item": {"definition": "def create_item(item: Item):\n    item_id = len(items_db) + 1\n    emi = None\n    if item.name == 'punch':\n        punch = TataPunch()\n        interest_rate = 5\n        loan_period_years = 5\n        emi = punch.calculate_emi(interest_rate, loan_period_years)\n    elif item.name == 'tiago':\n        tiago = TataTiago()\n        interest_rate = 5\n        loan_period_years = 5\n        emi = tiago.calculate_emi(interest_rate, loan_period_years)\n    elif item.name == 'indica':\n        indica = TataIndica()\n        interest_rate = 5\n        loan_period_years = 5\n        emi = indica.calculate_emi(interest_rate, loan_period_years)\n    else:\n        raise HTTPException(status_code=400, detail=\"Invalid car name\")\n\n    item.emi = emi\n    items_db[item_id] = item\n    return {\"item_id\": item_id, \"item\": item}", "description": "", "params": [{"type": "Item", "data": "item"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": ["TataIndica", "HTTPException", "TataPunch", "TataTiago"], "dependency_from_input": ["Item"]}}, "calculator.py": {"abs_path": "E:\\tmp\\langGraphTestProject\\dummy_project\\src\\calculator.py", "Calculator": {"definition": "class Calculator:\n    def add(self, a, b):\n        \"\"\"Return the sum of a and b.\"\"\"\n        return a + b\n\n    def minus(self, a, b):\n        \"\"\"Return the difference between a and b.\"\"\"\n        return a - b\n\n    def division(self, a, b):\n        \"\"\"Return the division of a by b. Raise an error if b is zero.\"\"\"\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return a / b\n\n    def multiplication(self, a, b):\n        \"\"\"Return the product of a and b.\"\"\"\n        return a * b\n\n    def percentage(self, part, whole):\n        \"\"\"Return the percentage of part out of whole.\"\"\"\n        if whole == 0:\n            raise ValueError(\"Whole cannot be zero\")\n        return (part / whole) * 100\n\n    def absolute_value(self, number):\n        \"\"\"Return the absolute value of the number.\"\"\"\n        return abs(number)", "dependency_from_body": [], "dependency_from_input": [], "add": {"definition": "def add(self, a, b):\n        \"\"\"Return the sum of a and b.\"\"\"\n        return a + b", "description": "Return the sum of a and b.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "minus": {"definition": "def minus(self, a, b):\n        \"\"\"Return the difference between a and b.\"\"\"\n        return a - b", "description": "Return the difference between a and b.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "division": {"definition": "def division(self, a, b):\n        \"\"\"Return the division of a by b. Raise an error if b is zero.\"\"\"\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return a / b", "description": "Return the division of a by b. Raise an error if b is zero.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "multiplication": {"definition": "def multiplication(self, a, b):\n        \"\"\"Return the product of a and b.\"\"\"\n        return a * b", "description": "Return the product of a and b.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "percentage": {"definition": "def percentage(self, part, whole):\n        \"\"\"Return the percentage of part out of whole.\"\"\"\n        if whole == 0:\n            raise ValueError(\"Whole cannot be zero\")\n        return (part / whole) * 100", "description": "Return the percentage of part out of whole.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "part"}, {"type": "Any", "data": "whole"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "absolute_value": {"definition": "def absolute_value(self, number):\n        \"\"\"Return the absolute value of the number.\"\"\"\n        return abs(number)", "description": "Return the absolute value of the number.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "number"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}}, "add": {"definition": "def add(self, a, b):\n        \"\"\"Return the sum of a and b.\"\"\"\n        return a + b", "description": "Return the sum of a and b.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "minus": {"definition": "def minus(self, a, b):\n        \"\"\"Return the difference between a and b.\"\"\"\n        return a - b", "description": "Return the difference between a and b.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "division": {"definition": "def division(self, a, b):\n        \"\"\"Return the division of a by b. Raise an error if b is zero.\"\"\"\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return a / b", "description": "Return the division of a by b. Raise an error if b is zero.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "multiplication": {"definition": "def multiplication(self, a, b):\n        \"\"\"Return the product of a and b.\"\"\"\n        return a * b", "description": "Return the product of a and b.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "a"}, {"type": "Any", "data": "b"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "percentage": {"definition": "def percentage(self, part, whole):\n        \"\"\"Return the percentage of part out of whole.\"\"\"\n        if whole == 0:\n            raise ValueError(\"Whole cannot be zero\")\n        return (part / whole) * 100", "description": "Return the percentage of part out of whole.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "part"}, {"type": "Any", "data": "whole"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "absolute_value": {"definition": "def absolute_value(self, number):\n        \"\"\"Return the absolute value of the number.\"\"\"\n        return abs(number)", "description": "Return the absolute value of the number.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "number"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}}, "car_emi.py": {"abs_path": "E:\\tmp\\langGraphTestProject\\dummy_project\\src\\car_emi.py", "Car": {"definition": "class Car:\n    def __init__(self, name, price, mileage, fuel_type):\n        self.name = name\n        self.price = price\n        self.mileage = mileage\n        self.fuel_type = fuel_type\n\n    def calculate_emi(self, interest_rate, loan_period_years):\n        \"\"\"Calculate EMI for the car.\"\"\"\n        loan_period_months = Calculator().multiplication(loan_period_years , 12)\n        monthly_interest_rate = Calculator().division(interest_rate, Calculator().multiplication(12 , 100))\n        emi = (self.price * monthly_interest_rate * (1 + monthly_interest_rate) ** loan_period_months) / (Calculator().add(1 , monthly_interest_rate) ** loan_period_months - 1)\n        return emi", "dependency_from_body": ["Calculator"], "dependency_from_input": [], "__init__": {"definition": "def __init__(self, name, price, mileage, fuel_type):\n        self.name = name\n        self.price = price\n        self.mileage = mileage\n        self.fuel_type = fuel_type", "description": "", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "name"}, {"type": "Any", "data": "price"}, {"type": "Any", "data": "mileage"}, {"type": "Any", "data": "fuel_type"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "calculate_emi": {"definition": "def calculate_emi(self, interest_rate, loan_period_years):\n        \"\"\"Calculate EMI for the car.\"\"\"\n        loan_period_months = Calculator().multiplication(loan_period_years , 12)\n        monthly_interest_rate = Calculator().division(interest_rate, Calculator().multiplication(12 , 100))\n        emi = (self.price * monthly_interest_rate * (1 + monthly_interest_rate) ** loan_period_months) / (Calculator().add(1 , monthly_interest_rate) ** loan_period_months - 1)\n        return emi", "description": "Calculate EMI for the car.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "interest_rate"}, {"type": "Any", "data": "loan_period_years"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": ["Calculator"], "dependency_from_input": []}}, "TataPunch": {"definition": "class TataPunch(Car):\n    def __init__(self):\n        super().__init__(name=\"Tata Punch\", price=700000, mileage=18, fuel_type=\"Petrol\")", "dependency_from_body": [], "dependency_from_input": [], "__init__": {"definition": "def __init__(self):\n        super().__init__(name=\"Tata Punch\", price=700000, mileage=18, fuel_type=\"Petrol\")", "description": "", "params": [{"type": "Any", "data": "self"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}}, "TataTiago": {"definition": "class TataTiago(Car):\n    def __init__(self):\n        super().__init__(name=\"Tata Tiago\", price=600000, mileage=23, fuel_type=\"Petrol\")", "dependency_from_body": [], "dependency_from_input": [], "__init__": {"definition": "def __init__(self):\n        super().__init__(name=\"Tata Tiago\", price=600000, mileage=23, fuel_type=\"Petrol\")", "description": "", "params": [{"type": "Any", "data": "self"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}}, "TataIndica": {"definition": "class TataIndica(Car):\n    def __init__(self):\n        super().__init__(name=\"Tata Indica\", price=500000, mileage=20, fuel_type=\"Diesel\")", "dependency_from_body": [], "dependency_from_input": [], "__init__": {"definition": "def __init__(self):\n        super().__init__(name=\"Tata Indica\", price=500000, mileage=20, fuel_type=\"Diesel\")", "description": "", "params": [{"type": "Any", "data": "self"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}}, "main": {"definition": "def main():\n    # Example usage:\n    punch = TataPunch()\n    tiago = TataTiago()\n    indica = TataIndica()\n\n    # Calculate EMI for each car with a 5% annual interest rate over 5 years\n    interest_rate = 5\n    loan_period_years = 5\n\n    print(f\"{punch.name} EMI: {punch.calculate_emi(interest_rate, loan_period_years):.2f} INR\")\n    print(f\"{tiago.name} EMI: {tiago.calculate_emi(interest_rate, loan_period_years):.2f} INR\")\n    print(f\"{indica.name} EMI: {indica.calculate_emi(interest_rate, loan_period_years):.2f} INR\")", "description": "", "params": [], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "__init__": {"definition": "def __init__(self, name, price, mileage, fuel_type):\n        self.name = name\n        self.price = price\n        self.mileage = mileage\n        self.fuel_type = fuel_type", "description": "", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "name"}, {"type": "Any", "data": "price"}, {"type": "Any", "data": "mileage"}, {"type": "Any", "data": "fuel_type"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": [], "dependency_from_input": []}, "calculate_emi": {"definition": "def calculate_emi(self, interest_rate, loan_period_years):\n        \"\"\"Calculate EMI for the car.\"\"\"\n        loan_period_months = Calculator().multiplication(loan_period_years , 12)\n        monthly_interest_rate = Calculator().division(interest_rate, Calculator().multiplication(12 , 100))\n        emi = (self.price * monthly_interest_rate * (1 + monthly_interest_rate) ** loan_period_months) / (Calculator().add(1 , monthly_interest_rate) ** loan_period_months - 1)\n        return emi", "description": "Calculate EMI for the car.", "params": [{"type": "Any", "data": "self"}, {"type": "Any", "data": "interest_rate"}, {"type": "Any", "data": "loan_period_years"}], "returns": {"type": "Any", "data": "Sample data"}, "caller_function": [], "dependency_from_body": ["Calculator"], "dependency_from_input": []}}, "validation.py": {"abs_path": "E:\\tmp\\langGraphTestProject\\dummy_project\\src\\validation.py", "Item": {"definition": "class Item(BaseModel):\n    name: str\n    description: str = None\n    price: float\n    tax: float = None\n    emi: Optional[float] = None", "dependency_from_body": [], "dependency_from_input": []}}}